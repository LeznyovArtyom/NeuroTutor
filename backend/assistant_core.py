from typing import List
from nltk.metrics import edit_distance
import json, re, os, asyncio
from models import Chat as ChatModel, ChatStage, Work as WorkModel
from sqlmodel import Session
import PyPDF2
import docx # python-docx
from pathlib import Path
from io import BytesIO
from model_utils import generate_once_mistral


# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF / DOCX / TXT
def extract_text(file_data: bytes, filename: str) -> str:
    ext = Path(filename).suffix.lower() # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    try:
        if ext == ".pdf":
            pdf = PyPDF2.PdfReader(BytesIO(file_data), strict=False)
            raw = "\n".join(page.extract_text() or "" for page in pdf.pages)
        elif ext in {".docx", ".doc"}:
            doc = docx.Document(BytesIO(file_data))
            raw = "\n".join(p.text for p in doc.paragraphs)
        elif ext in {".txt", ".md"}:
            raw = file_data.decode("utf-8", errors="ignore")
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Å—ã–π —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞: {ext}")
    except Exception as error:
        raise RuntimeError(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ {filename}: {error}")
    
    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    cleaned = re.sub(r"[ \t]+", " ", raw)
    cleaned = re.sub(r"\s*\n\s*", "\n", cleaned)
    return cleaned.strip()


# –û–¥–∏–Ω —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
async def next_turn(chat: ChatModel, user_message: str | None, session: Session) -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã:
    - –ù–∞ —ç—Ç–∞–ø–µ UPLOAD: —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–∞–¥–∞–Ω–∏–µ,
      –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ JSON-–æ—Ü–µ–Ω–∫—É, –ø–∞—Ä—Å–∏—Ç –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç.
    - –î–∞–ª–µ–µ: –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç.
    """
    # 0. –ß–∞—Ç —Å–æ–∑–¥–∞–Ω, —Ä–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if chat.stage == ChatStage.NEW:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–æ–π, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ."
    
    # 2. –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
    if chat.stage == ChatStage.RETURNED_FOR_REVISION:
        return "–í–∞—à—É —Ä–∞–±–æ—Ç—É –≤–µ—Ä–Ω—É–ª–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é."


    

    # ---------- 2. –¥–∏–∞–ª–æ–≥ DIALOGUE ----------
    if chat.stage == ChatStage.DIALOGUE:
        meta = json.loads(chat.meta)
        qinfo = meta["qs"][chat.current_q]
        score = grade(user_message, qinfo["a"])
        chat.score += score
        correct = score > 0.8

        if correct:
            feedback = "–í–µ—Ä–Ω–æ! ‚úÖ"
            chat.current_q += 1
        else:
            # —É—Ç–æ—á–Ω—è–µ–º / –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º
            if score > 0.4:
                feedback = "–ü–æ—á—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å ü§î"
                session.add(chat); session.commit()
                return feedback          # –∑–∞–¥–∞—ë–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑
            feedback = f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {qinfo['a']}"

        # –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å?
        if chat.current_q == len(meta["qs"]):
            chat.stage = ChatStage.REVIEW
        else:
            # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—ã—à–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            nxt = meta["qs"][chat.current_q]
            feedback += f"\n\n–í–æ–ø—Ä–æ—Å {chat.current_q+1}: {nxt['q']}"

        session.add(chat); session.commit()
        return feedback

    # ---------- 3. —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ----------
    if chat.stage == ChatStage.REVIEW:
        n = len(json.loads(chat.meta)["qs"])
        result = chat.score / n
        chat.stage = ChatStage.FINISHED
        session.add(chat); session.commit()
        if result >= 0.8:
            return f"–†–∞–±–æ—Ç–∞ –∑–∞—á—Ç–µ–Ω–∞ (¬´{result*100:.0f}%¬ª)! üéâ"
        return (f"–†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞—á—Ç–µ–Ω–∞ ({result*100:.0f}%). "
                "–°–æ–≤–µ—Ç—É—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É X –∏ Y.")

    # ---------- 4. –≤—Å—ë –∫–æ–Ω—á–∏–ª–æ—Å—å ----------
    return "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –≤–æ–ø—Ä–æ—Å—ã."


# 1. –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
async def handle_checking_the_work_stage(chat: ChatModel, session: Session) -> str:
    # –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not chat.document_data or not chat.document_name:
        raise RuntimeError("–î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞")
    file_text = extract_text(chat.document_data, chat.document_name)

    # –ø–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ä–∞–±–æ—Ç—ã
    work: WorkModel = session.get(WorkModel, chat.work_id)
    expected_task = work.task or ""
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
    system_prompt = (
        "–¢—ã –≤—ã—Å—Ç—É–ø–∞–µ—à—å –≤ —Ä–æ–ª–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –û—Ü–µ–Ω–∏ —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º –∑–∞–¥–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–Ω–æ–µ –Ω–∏–∂–µ. "
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {expected_task}\n"
        "–ò–≥–Ω–æ—Ä–∏—Ä—É–π –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞; –æ—Ü–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –∑–∞–¥–∞–Ω–∏—è. "
        "–í–µ—Ä–Ω–∏ –æ–±—ä–µ–∫—Ç JSON —Å –∫–ª—é—á–∞–º–∏: "
        "'status' ('ok' –∏–ª–∏ 'needs_fix'), "
        "'feedback' (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏), "
        "'missing' (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), "
        "'questions' (–º–∞—Å—Å–∏–≤ –∏–∑ {'q','a'}, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 'ok')."
    )
    user_prompt = (
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {expected_task}\n"
        f"–¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:\n{file_text}"
    )
    full_prompt = system_prompt + "\n\n" + user_prompt
    # –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    resp = await generate_once_mistral(full_prompt)

    # –≤—ã—Ä–µ–∑–∞–µ–º JSON markdown –∏–∑ –æ—Ç–≤–µ—Ç–∞
    text = resp.strip()
    if match := re.search(r"```(?:json)?\n([\s\S]*?)```", text):
        text = match.group(1).strip()
    text = re.sub(r"^json\s*", "", text, flags=re.IGNORECASE).strip()

    # –ø–∞—Ä—Å–∏–º JSON
    try:
        result = json.loads(text)
    except json.JSONDecodeError as error:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {error}\n–û—Ç–≤–µ—Ç: {text}")
    status = result.get('status')
    feedback = result.get('feedback', '')
    missing = result.get('missing', []) or []

    # –°–æ—Ö—Ä–∞–Ω–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–æ–∫
    chat.meta = json.dumps({
        "original_excerpt": file_text,
        "missing": missing
    })

    # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏
    if status != 'ok':
        message = f"‚ùå –†–∞–±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {feedback}"
        if missing:
            message += "\n\n–ù–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∏:" + "\n" + "\n".join(f"- {item}" for item in missing)
        chat.stage = ChatStage.RETURNED_FOR_REVISION
        session.add(chat)
        session.commit()
        return message
    


    # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
    questions = result.get('questions', [])
    chat.meta = json.dumps({'status': 'ok', 'feedback': feedback, 'questions': questions})
    chat.stage = ChatStage.DIALOGUE
    chat.current_q = 0
    session.add(chat); session.commit()
    first_q = questions[0]['q'] if questions else '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ.'
    return f"‚úÖ –í —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç –Ω–µ–¥–æ—á–µ—Ç–æ–≤ ({feedback}). –ù–∞—á–∏–Ω–∞–µ–º —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫—É:\n\n–í–æ–ø—Ä–æ—Å 1: {first_q}"


# 2. –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
async def handle_checking_the_corrected_work_stage(chat: ChatModel, session: Session) -> str:
    # –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not chat.document_data or not chat.document_name:
        raise RuntimeError("–î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞")
    new_text = extract_text(chat.document_data, chat.document_name)

    # –¥–æ—Å—Ç–∞—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤ chat.meta —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å missing –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    data = json.loads(chat.meta)
    original_excerpt = data.get('original_excerpt', '') # –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    missing = data.get('missing', []) # –ù–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∏

    # –ø–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ä–∞–±–æ—Ç—ã
    work: WorkModel = session.get(WorkModel, chat.work_id)
    expected_task = work.task or ""
    
    # –ø—Ä–æ–º–ø—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    system_prompt = (
        "–¢—ã ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. "
        "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n" + expected_task + "\n\n"
        "–†–∞–Ω–µ–µ —Ç—ã –Ω–∞—à—ë–ª –≤ —ç—Ç–æ–π —Ä–∞–±–æ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç—á–µ—Ç–µ:\n" +
        "\n".join(f"- {m}" for m in missing) +
        "\n–¢–µ–ø–µ—Ä—å —Å—Ç—É–¥–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é. "
        "–ü—Ä–æ–≤–µ—Ä—å, –±—ã–ª–∏ –ª–∏ —ç—Ç–∏ –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã. "
        "–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON —Å –ø–æ–ª—è–º–∏:\n"
        "  fixed: true –∏–ª–∏ false,\n"
        "  missing: [–º–∞—Å—Å–∏–≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–æ–∫],\n"
        "  feedback: \"–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\".\n"
        "  questions: (–º–∞—Å—Å–∏–≤ –∏–∑ {'q','a'}, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ fixed = true).\n"
    )
    user_prompt = (
        "–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç—á—ë—Ç–∞:\n" + original_excerpt + "\n\n"
        "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç—á—ë—Ç–∞:\n" + new_text
    )
    full_prompt = system_prompt + "\n\n" + user_prompt
    # –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    resp = await generate_once_mistral(full_prompt)

    # –≤—ã—Ä–µ–∑–∞–µ–º JSON markdown –∏–∑ –æ—Ç–≤–µ—Ç–∞
    text = resp.strip()
    if match := re.search(r"```(?:json)?\n([\s\S]*?)```", text):
        text = match.group(1).strip()
    text = re.sub(r"^json\s*", "", text, flags=re.IGNORECASE).strip()

    # –ø–∞—Ä—Å–∏–º JSON
    try:
        result = json.loads(text)
    except json.JSONDecodeError as error:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {error}\n–û—Ç–≤–µ—Ç: {text}")
    
    fixed = result.get("fixed", False)
    still_missing = result.get("missing", [])
    
    if not fixed:
        # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º meta –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        chat.meta = json.dumps({
            "original_excerpt": original_excerpt,
            "missing": still_missing
        })
        chat.stage = ChatStage.RETURNED_FOR_REVISION
        session.add(chat)
        session.commit()
        return "‚ùå –í—Å—ë –µ—â—ë –µ—Å—Ç—å –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∏:\n" + "\n".join(f"- {m}" for m in still_missing)
        
    # –µ—Å–ª–∏ fixed==true ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å Q&A
    questions = result.get('questions', [])
    chat.meta = json.dumps({ 
        'status': 'ok', 
        'feedback': result['feedback'], 
        'questions': questions 
    })
    chat.stage = ChatStage.DIALOGUE
    chat.current_q = 0
    session.add(chat)
    session.commit()
    return f"‚úÖ –í—Å—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ({result['feedback']}). –ù–∞—á–∏–Ω–∞–µ–º —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫—É:\n\n–í–æ–ø—Ä–æ—Å 1: {questions[0]['q']}"
